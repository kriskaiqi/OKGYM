"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const ExerciseController_1 = require("../controllers/ExerciseController");
const auth_1 = require("../middleware/auth");
const isAdmin_1 = require("../middleware/isAdmin");
const data_source_1 = require("../data-source");
const Exercise_1 = require("../models/Exercise");
const ExerciseCategory_1 = require("../models/ExerciseCategory");
const Equipment_1 = require("../models/Equipment");
const Media_1 = require("../models/Media");
const ExerciseRelation_1 = require("../models/ExerciseRelation");
const ExerciseService_1 = require("../services/ExerciseService");
const logger_1 = __importDefault(require("../utils/logger"));
const router = (0, express_1.Router)();
const exerciseRepository = data_source_1.AppDataSource.getRepository(Exercise_1.Exercise);
const categoryRepository = data_source_1.AppDataSource.getRepository(ExerciseCategory_1.ExerciseCategory);
const equipmentRepository = data_source_1.AppDataSource.getRepository(Equipment_1.Equipment);
const mediaRepository = data_source_1.AppDataSource.getRepository(Media_1.Media);
const relationRepository = data_source_1.AppDataSource.getRepository(ExerciseRelation_1.ExerciseRelation);
const { cacheManager } = require('../services/CacheManager');
const exerciseService = new ExerciseService_1.ExerciseService(exerciseRepository, categoryRepository, equipmentRepository, mediaRepository, relationRepository, cacheManager);
const exerciseController = new ExerciseController_1.ExerciseController(exerciseService);
logger_1.default.info('ExerciseController initialized with ExerciseService in routes');
router.get('/exercises', exerciseController.getAllExercises.bind(exerciseController));
router.get('/exercises/:id', exerciseController.getExerciseById.bind(exerciseController));
router.post('/exercises', auth_1.authenticate, exerciseController.createExercise.bind(exerciseController));
router.put('/exercises/:id', auth_1.authenticate, exerciseController.updateExercise.bind(exerciseController));
router.delete('/exercises/:id', auth_1.authenticate, isAdmin_1.isAdmin, exerciseController.deleteExercise.bind(exerciseController));
router.get('/exercise-categories', exerciseController.getExerciseCategories.bind(exerciseController));
router.get('/exercise-categories/:id', exerciseController.getCategoryById.bind(exerciseController));
router.get('/exercise-categories/:id/exercises', exerciseController.getExercisesByCategory.bind(exerciseController));
router.post('/exercise-categories', auth_1.authenticate, isAdmin_1.isAdmin, exerciseController.createCategory.bind(exerciseController));
router.put('/exercise-categories/:id', auth_1.authenticate, isAdmin_1.isAdmin, exerciseController.updateCategory.bind(exerciseController));
router.delete('/exercise-categories/:id', auth_1.authenticate, isAdmin_1.isAdmin, exerciseController.deleteCategory.bind(exerciseController));
router.get('/equipment', exerciseController.getAllEquipment.bind(exerciseController));
router.get('/equipment/:id', exerciseController.getEquipmentById.bind(exerciseController));
router.get('/equipment/:id/exercises', exerciseController.getExercisesByEquipment.bind(exerciseController));
router.post('/equipment', auth_1.authenticate, isAdmin_1.isAdmin, exerciseController.createEquipment.bind(exerciseController));
router.put('/equipment/:id', auth_1.authenticate, isAdmin_1.isAdmin, exerciseController.updateEquipment.bind(exerciseController));
router.delete('/equipment/:id', auth_1.authenticate, isAdmin_1.isAdmin, exerciseController.deleteEquipment.bind(exerciseController));
router.get('/exercises/search', exerciseController.searchExercises.bind(exerciseController));
router.get('/exercises/by-muscle/:muscleGroup', exerciseController.getExercisesByMuscleGroup.bind(exerciseController));
router.get('/exercises/by-difficulty/:difficulty', exerciseController.getExercisesByDifficulty.bind(exerciseController));
router.get('/exercises/by-movement/:movementPattern', exerciseController.getExercisesByMovementPattern.bind(exerciseController));
router.get('/exercises/popular', exerciseController.getPopularExercises.bind(exerciseController));
router.get('/exercises/:id/related', exerciseController.getRelatedExercises.bind(exerciseController));
router.get('/exercises/:id/alternatives', exerciseController.getExerciseAlternatives.bind(exerciseController));
router.get('/exercises/:id/progressions', exerciseController.getExerciseProgressions.bind(exerciseController));
router.post('/exercises/:id/relations', auth_1.authenticate, exerciseController.createExerciseRelation.bind(exerciseController));
router.delete('/exercises/relations/:relationId', auth_1.authenticate, exerciseController.removeExerciseRelation.bind(exerciseController));
exports.default = router;
//# sourceMappingURL=exerciseRoutes.js.map